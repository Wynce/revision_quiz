<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🚀 Gen Alpha Revision Fun! 📚</title>
    <!-- Google Fonts: Poppins for a playful yet readable look -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;800&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN for modern, responsive styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Base styles for light mode */
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%); /* Purple to Pink */
            min-height: 100vh;
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333; /* Default text color */
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            color: #333;
        }

        .header {
            background: linear-gradient(135deg, #2563EB 0%, #10B981 100%); /* Blue to Green - Corporate colors */
            color: white;
            padding: 1rem 1.5rem; /* Adjusted padding for header */
            display: flex; /* Use flexbox for alignment */
            flex-wrap: wrap; /* Allow wrapping on small screens */
            align-items: center;
            justify-content: space-between; /* Space out items */
            position: relative;
            overflow: hidden;
            border-radius: 1.5rem 1.5rem 0 0; /* Rounded top corners */
        }

        .header-content {
            flex-grow: 1; /* Allow content to take available space */
            text-align: center; /* Center text within its flexible space */
        }

        .header-buttons {
            display: flex;
            gap: 0.75rem; /* Space between buttons */
            margin-left: auto; /* Push to the right */
            align-items: center;
        }

        @media (max-width: 768px) { /* Adjust for smaller screens */
            .header {
                flex-direction: column; /* Stack items vertically */
                padding: 1rem;
            }
            .header-buttons {
                margin-left: 0; /* Remove auto margin */
                margin-top: 1rem; /* Add space above buttons */
                justify-content: center; /* Center buttons when stacked */
                width: 100%; /* Full width for buttons container */
            }
            .header-content {
                width: 100%; /* Full width for content */
            }
        }


        .progress-section {
            background: #F9FAFB; /* Light gray */
            border-color: #E5E7EB; /* Light border */
        }

        .stat-item {
            background: white;
        }

        .blank-input {
            border-color: #93C5FD; /* Light blue */
            background-color: white;
            color: #333;
        }
        .blank-input:focus {
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.3); /* Indigo glow */
        }

        .status-indicator {
            background-color: #E5E7EB;
            color: #6B7280;
        }

        /* Dark mode styles */
        body.dark-mode {
            background: linear-gradient(135deg, #1F2937 0%, #4B5563 100%); /* Darker gradient */
            color: #E5E7EB; /* Light gray text */
        }

        body.dark-mode .container {
            background: rgba(31, 41, 55, 0.95); /* Darker container */
            color: #E5E7EB;
        }

        body.dark-mode .header {
            background: linear-gradient(135deg, #1D4ED8 0%, #059669 100%); /* Darker corporate colors */
        }

        body.dark-mode .progress-section {
            background: #374151; /* Darker gray */
            border-color: #4B5563;
        }

        body.dark-mode .stat-item {
            background: #4B5563;
            color: #E5E7EB;
        }

        body.dark-mode .notes-input label {
            color: #E5E7EB;
        }

        body.dark-mode textarea {
            background-color: #374151;
            border-color: #6B7280;
            color: #E5E7EB;
        }
        body.dark-mode textarea:focus {
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.3); /* Blue glow */
        }

        body.dark-mode .blank-input {
            border-color: #6B7280;
            background-color: #374151;
            color: #E5E7EB;
        }
        body.dark-mode .blank-input:focus {
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.3); /* Blue glow */
        }

        body.dark-mode .status-indicator {
            background-color: #4B5563;
            color: #E5E7EB;
        }
        body.dark-mode .status-indicator.correct {
            background-color: #10B981; /* Darker green for correct */
            color: white;
        }
        body.dark-mode .status-indicator.incorrect {
            background-color: #EF4444; /* Red for incorrect */
            color: white;
        }
        body.dark-mode .status-indicator.show-answer {
            background-color: #F59E0B; /* Orange for revealed answer */
            color: #333;
        }
        body.dark-mode .blank-input.correct {
            background-color: #065F46 !important; /* Darker green for correct input */
            border-color: #10B981 !important;
            color: #E5E7EB !important;
        }
        body.dark-mode .blank-input.incorrect {
            background-color: #7F1D1D !important; /* Darker red for incorrect input */
            border-color: #EF4444 !important;
            color: #E5E7EB !important;
        }
        body.dark-mode .blank-input.show-answer {
            background-color: #9A3412 !important; /* Darker orange for revealed input */
            border-color: #F59E0B !important;
            color: #E5E7EB !important;
        }

        /* Fix for revision content text in dark mode */
        body.dark-mode .revision-content {
            background-color: #374151; /* Darker background for content area */
            color: #E5E7EB; /* Light text for content area */
        }
        body.dark-mode .revision-content .placeholder-text {
            color: #9CA3AF; /* Lighter gray for placeholder text */
        }

        /* Fix for modal text in dark mode */
        body.dark-mode .custom-modal-content h2,
        body.dark-mode .custom-modal-content h3,
        body.dark-mode .custom-modal-content p,
        body.dark-mode .custom-modal-content ul,
        body.dark-mode .custom-modal-content ol,
        body.dark-mode .custom-modal-content li,
        body.dark-mode .custom-modal-content strong,
        body.dark-mode .custom-modal-content span { /* Added span for stat-item text */
            color: #E5E7EB !important; /* Ensure all text inside modals is light */
        }
        body.dark-mode .custom-modal-content .text-purple-600 {
            color: #DDA0DD !important; /* Adjust purple headings for dark mode */
        }
        /* Specific fix for the score/percentage text in modals */
        body.dark-mode .custom-modal-content .my-4 p strong {
            color: #E5E7EB !important;
        }

        /* Custom animation for header elements */
        .header-bg-animate {
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }

        /* Shake animation for incorrect answers */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        .animate-shake {
            animation: shake 0.5s ease-in-out;
        }

        /* Pop-in animation for modals */
        @keyframes popIn {
            0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }
        .animate-popIn {
            animation: popIn 0.3s ease-out forwards;
        }

        /* Custom scrollbar for text area */
        textarea::-webkit-scrollbar {
            width: 8px;
        }
        textarea::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        textarea::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        textarea::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        body.dark-mode textarea::-webkit-scrollbar-track {
            background: #374151;
        }
        body.dark-mode textarea::-webkit-scrollbar-thumb {
            background: #6B7280;
        }

        /* Enhanced Button Styles */
        .btn {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 9999px; /* Fully rounded pills */
            font-size: 1rem;
            font-weight: 700; /* Bolder text */
            cursor: pointer;
            transition: all 0.3s ease-in-out; /* Smoother transitions */
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Default shadow */
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1); /* Subtle text shadow */
            min-width: 120px; /* Adjusted minimum width for header buttons */
        }

        /* New Button Color Scheme */
        /* Primary Button: Blue (#0453f1) */
        .btn-primary {
            background: linear-gradient(135deg, #0453f1 0%, #5e5e6a 100%); /* Darker blue to lighter blue */
            color: white;
            box-shadow: 0 6px 20px rgba(4, 83, 241, 0.4);
        }
        .btn-primary:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 25px rgba(4, 83, 241, 0.5);
        }
        .btn-primary:active {
            transform: translateY(0px) scale(0.98);
            box-shadow: 0 2px 8px rgba(4, 83, 241, 0.3);
        }

        /* Secondary Button: Orange (#FF6701) */
        .btn-secondary {
            background: linear-gradient(135deg, #FF6701 0%, #f2e08a 100%); /* Orange to lighter yellow */
            color: #333; /* Dark text for contrast */
            box-shadow: 0 6px 20px rgba(255, 103, 1, 0.4);
        }
        .btn-secondary:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 25px rgba(255, 103, 1, 0.5);
        }
        .btn-secondary:active {
            transform: translateY(0px) scale(0.98);
            box-shadow: 0 2px 8px rgba(255, 103, 1, 0.3);
        }

        /* Tertiary Button: Red (keeping original red for "Start Over") */
        .btn-tertiary {
            background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%); /* Red to Dark Red */
            color: white;
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
        }
        .btn-tertiary:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.5);
        }
        .btn-tertiary:active {
            transform: translateY(0px) scale(0.98);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        /* Status Indicator Animations */
        .status-indicator.correct {
            animation: bounce 0.5s ease-out;
        }
        .status-indicator.incorrect {
            animation: shake 0.5s ease-in-out;
        }
        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
        /* Toggle Switch Styles */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #0453f1; /* Primary button color */
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #0453f1;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }
    </style>
</head>
<body class="flex items-center justify-center">
    <div class="container max-w-3xl w-full mx-auto bg-white bg-opacity-95 rounded-3xl shadow-2xl backdrop-blur-md overflow-hidden my-8">
        <!-- Header Section -->
        <div class="header text-white">
            <!-- Animated background elements -->
            <div class="absolute inset-0 header-bg-animate">
                <svg class="w-full h-full opacity-10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="20" cy="20" r="3" fill="rgba(255,255,255,0.2)"/>
                    <circle cx="80" cy="80" r="4" fill="rgba(255,255,255,0.2)"/>
                    <circle cx="40" cy="60" r="2" fill="rgba(255,255,255,0.2)"/>
                    <circle cx="10" cy="90" r="2.5" fill="rgba(255,255,255,0.2)"/>
                    <circle cx="90" cy="10" r="3.5" fill="rgba(255,255,255,0.2)"/>
                </svg>
            </div>
            <div class="header-content">
                <!-- Logo added here -->
                <img src="AXCEL LOGO HORIZONTAL.jpg" alt="AXCEL LOGO" class="mx-auto mb-2 w-24 md:w-32 h-auto relative z-10 drop-shadow-md">
                <h1 class="text-4xl md:text-5xl font-extrabold mb-2 drop-shadow-lg relative z-10">
                    Revision Adventure! 🚀
                </h1>
                <p class="text-lg md:text-xl opacity-90 relative z-10">
                    Turn your notes into a super fun quiz!
                </p>
            </div>
            <div class="header-buttons relative z-10">
                <button class="btn btn-primary text-sm md:text-base px-3 py-2" onclick="showInstructionsModal()">
                    ❓ Instructions
                </button>
                <button class="btn btn-primary text-sm md:text-base px-3 py-2" onclick="showSettingsModal()">
                    ⚙️ Settings
                </button>
            </div>
        </div>

        <!-- Progress and Stats Section -->
        <div class="progress-section p-6 border-b border-gray-100">
            <div class="progress-bar w-full h-5 bg-gray-200 rounded-full overflow-hidden mb-4 shadow-inner">
                <div class="progress-fill h-full bg-gradient-to-r from-green-400 to-emerald-500 transition-all duration-500 ease-out rounded-full" id="progressFill" style="width: 0%;"></div>
            </div>
            <div class="stats flex flex-wrap justify-around items-center gap-4 text-sm md:text-base">
                <div class="stat-item flex items-center gap-2 px-4 py-2 rounded-full shadow-md font-semibold">
                    <span>📊</span>
                    <span id="progressText">0% Complete</span>
                </div>
                <div class="stat-item flex items-center gap-2 px-4 py-2 rounded-full shadow-md font-semibold">
                    <span>✅</span>
                    <span id="correctCount">0 Correct</span>
                </div>
                <div class="stat-item flex items-center gap-2 px-4 py-2 rounded-full shadow-md font-semibold">
                    <span>❌</span>
                    <span id="incorrectCount">0 Incorrect</span>
                </div>
                <div class="stat-item flex items-center gap-2 px-4 py-2 rounded-full shadow-md font-semibold">
                    <span>🎯</span>
                    <span id="totalBlanks">0 Total</span>
                </div>
            </div>
        </div>

        <!-- Timer Display -->
        <div id="timerDisplay" class="text-center text-xl font-bold py-2 bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-100 rounded-b-lg" style="display: none;">
            ⏰ <span id="timeRemaining">00:00</span>
        </div>

        <!-- Main Content Area -->
        <div class="content p-6">
            <!-- Notes Input Section -->
            <div class="notes-input mb-6" id="notesInput">
                <label for="notesTextarea" class="block text-lg font-semibold mb-3">
                    📝 Paste your awesome revision notes here:
                </label>
                <textarea id="notesTextarea"
                          class="w-full h-40 p-4 border-2 rounded-xl text-base resize-y focus:outline-none focus:ring-4 transition-all duration-300 shadow-inner"
                          placeholder="Example: The [force] required to accelerate an object is equal to its [mass] times its [acceleration]. This is known as [Newton's] second law of motion.

✨ Pro Tip: Put words you want to turn into blanks inside [square brackets]! You'll see the first letter and underscores for the rest.

Works for ANY subject - Science, History, Languages, and more! Let's learn!"></textarea>
            </div>

            <!-- Control Buttons -->
            <div class="controls flex flex-wrap justify-center gap-4 mb-8">
                <button class="btn btn-primary" onclick="generateRevision()">
                    🚀 Generate My Quiz!
                </button>
                <button class="btn btn-secondary" id="submitBtn" onclick="submitQuiz()" style="display: none;">
                    ✅ Check My Answers!
                </button>
                <button class="btn btn-secondary" id="revealBtn" onclick="revealAnswers()" style="display: none;">
                    👁️ Show Me The Answers!
                </button>
                <button class="btn btn-secondary" id="retestBtn" onclick="retestQuestions()" style="display: none;">
                    🔄 Try Again!
                </button>
                <button class="btn btn-tertiary" onclick="resetRevision()">
                    🗑️ Start Over
                </button>
            </div>

            <!-- Revision Content Display Area -->
            <div id="revisionContent" class="revision-content bg-white rounded-2xl p-6 shadow-xl text-lg leading-relaxed" style="display: none;">
                <div class="placeholder-text text-gray-500 italic text-center py-8">
                    Your interactive revision notes will appear here! ✨ Get ready to fill in the blanks!
                </div>
            </div>
        </div>
    </div>

    <!-- Custom Modal Container -->
    <div id="customModalContainer" class="fixed inset-0 bg-black bg-opacity-60 z-[999] hidden flex items-center justify-center">
        <!-- Modal content will be injected here -->
    </div>

    <script>
        let blanksData = [];
        let totalBlanks = 0;
        let correctAnswers = 0;
        let incorrectAnswers = 0;
        let quizSubmitted = false;
        let timerInterval;
        let timeLimit = 300; // Default 5 minutes (300 seconds)
        let currentTime = timeLimit;
        let isTimerEnabled = false;

        // Default notes content
        const defaultNotes = `The [force] required to accelerate an object is equal to its [mass] times its [acceleration]. This is known as [Newton's] second law of motion.

[Energy] cannot be created or destroyed, only transferred from one form to another. This is the law of conservation of [energy].

The [speed] of light in a vacuum is approximately [300000000] meters per second. Light travels in straight lines and can be [reflected] by mirrors.

[Electricity] is the flow of [electrons] through a conductor. The unit of electrical [current] is the [ampere].

[Temperature] is a measure of the average [kinetic] energy of particles in a substance. Heat always flows from [hot] objects to [cold] objects.`;


        // --- Utility Functions for Custom Modals ---
        function showCustomModal(title, message, buttonsHtml, onModalClose = () => {}) {
            const modalContainer = document.getElementById('customModalContainer');
            // Add a class to the inner modal content for specific dark mode styling
            modalContainer.innerHTML = `
                <div class="bg-white dark:bg-gray-800 p-8 rounded-3xl shadow-2xl text-center max-w-sm w-11/12 animate-popIn custom-modal-content">
                    <h2 class="text-3xl font-extrabold mb-4 text-purple-600 dark:text-purple-400">${title}</h2>
                    <p class="text-gray-700 dark:text-gray-300 text-lg mb-6">${message}</p>
                    <div class="flex justify-center gap-4">
                        ${buttonsHtml}
                    </div>
                </div>
            `;
            modalContainer.classList.remove('hidden');
            modalContainer.onclick = (e) => {
                if (e.target === modalContainer) {
                    closeCustomModal();
                    onModalClose();
                }
            };
        }

        function closeCustomModal() {
            const modalContainer = document.getElementById('customModalContainer');
            modalContainer.classList.add('hidden');
            modalContainer.innerHTML = ''; // Clear content
        }

        // --- Instructions Modal Functions ---
        function showInstructionsModal() {
            const instructionsContent = `
                <div class="text-left text-gray-700 dark:text-gray-300">
                    <h3 class="text-xl font-bold mb-2 text-purple-600 dark:text-purple-400">How to Use:</h3>
                    <ol class="list-decimal list-inside mb-4 space-y-2">
                        <li>Paste your revision notes into the text area.</li>
                        <li>Wrap any words you want to turn into blanks with **[square brackets]**.</li>
                        <li>Click "🚀 Generate My Quiz!" to create your interactive quiz.</li>
                        <li>Fill in the blanks!</li>
                        <li>Click "✅ Check My Answers!" to see how you did.</li>
                        <li>Use "👁️ Show Me The Answers!" to reveal correct answers.</li>
                        <li>Click "🔄 Try Again!" to reattempt the current quiz.</li>
                        <li>"🗑️ Start Over" clears everything to begin a new session.</li>
                    </ol>
                    <h3 class="text-xl font-bold mb-2 text-purple-600 dark:text-purple-400">Difficulty Levels:</h3>
                    <ul class="list-disc list-inside space-y-1">
                        <li>**Easy:** Reveals the first **2** characters of the blank.</li>
                        <li>**Medium:** Reveals the first **1** character of the blank.</li>
                        <li>**Hard:** Reveals **no** characters of the blank.</li>
                    </ul>
                    <p class="mt-4">Have fun revising! 🎉</p>
                </div>
            `;
            showCustomModal(
                '📚 Quiz Instructions',
                instructionsContent,
                `<button class="btn btn-primary" onclick="closeCustomModal()">Got It!</button>`
            );
        }

        // --- Settings Modal Functions ---
        function showSettingsModal() {
            const currentDifficulty = localStorage.getItem('quizDifficulty') || 'hard'; // Default to hard for 0 char
            const isDarkMode = document.body.classList.contains('dark-mode');
            const timerEnabled = localStorage.getItem('isTimerEnabled') === 'true';
            const savedTimeLimit = localStorage.getItem('timeLimit') || 300; // Default 5 mins

            let difficultyRadios = `
                <div class="flex flex-col gap-2">
                    <label class="inline-flex items-center">
                        <input type="radio" name="difficulty" value="easy" class="form-radio text-blue-600 h-5 w-5" ${currentDifficulty === 'easy' ? 'checked' : ''}>
                        <span class="ml-2 text-gray-700 dark:text-gray-300">Easy (2 characters revealed)</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="radio" name="difficulty" value="medium" class="form-radio text-blue-600 h-5 w-5" ${currentDifficulty === 'medium' ? 'checked' : ''}>
                        <span class="ml-2 text-gray-700 dark:text-gray-300">Medium (1 character revealed)</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="radio" name="difficulty" value="hard" class="form-radio text-blue-600 h-5 w-5" ${currentDifficulty === 'hard' ? 'checked' : ''}>
                        <span class="ml-2 text-gray-700 dark:text-gray-300">Hard (No characters revealed)</span>
                    </label>
                </div>
            `;

            const settingsContent = `
                <div class="flex flex-col gap-6 text-left">
                    <div>
                        <h3 class="text-xl font-bold mb-2 text-purple-600 dark:text-purple-400">Appearance</h3>
                        <div class="flex items-center justify-between">
                            <span class="text-lg text-gray-700 dark:text-gray-300">Dark Mode</span>
                            <label class="switch">
                                <input type="checkbox" id="darkModeToggle" ${isDarkMode ? 'checked' : ''} onchange="toggleDarkMode()">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    <div>
                        <h3 class="text-xl font-bold mb-2 text-purple-600 dark:text-purple-400">Quiz Settings</h3>
                        <div class="mb-4">
                            <label class="block text-lg text-gray-700 dark:text-gray-300 mb-2">Difficulty Level:</label>
                            ${difficultyRadios}
                        </div>
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-lg text-gray-700 dark:text-gray-300">Enable Timer</span>
                            <label class="switch">
                                <input type="checkbox" id="timerToggle" ${timerEnabled ? 'checked' : ''} onchange="toggleTimerSetting()">
                                <span class="slider"></span>
                            </label>
                        </div>
                        <div id="timerDurationSetting" class="${timerEnabled ? '' : 'hidden'}">
                            <label for="timeLimitInput" class="block text-lg text-gray-700 dark:text-gray-300 mb-2">Time Limit (minutes):</label>
                            <input type="number" id="timeLimitInput" value="${Math.round(savedTimeLimit / 60)}" min="1" max="60"
                                   class="w-full p-2 border-2 rounded-lg text-base focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200/50 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600">
                        </div>
                    </div>
                </div>
            `;

            showCustomModal(
                '⚙️ App Settings',
                settingsContent,
                `<button class="btn btn-primary" onclick="saveSettings()">Save Settings</button>
                 <button class="btn btn-tertiary" onclick="closeCustomModal()">Close</button>`
            );

            // Add event listeners for difficulty radio buttons
            document.querySelectorAll('input[name="difficulty"]').forEach(radio => {
                radio.addEventListener('change', (event) => {
                    localStorage.setItem('quizDifficulty', event.target.value);
                });
            });

            // Add event listener for time limit input
            document.getElementById('timeLimitInput').addEventListener('change', (event) => {
                const newTime = parseInt(event.target.value) * 60;
                if (!isNaN(newTime) && newTime > 0) {
                    localStorage.setItem('timeLimit', newTime);
                    timeLimit = newTime; // Update global timeLimit
                }
            });
        }

        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
        }

        function toggleTimerSetting() {
            const timerToggle = document.getElementById('timerToggle');
            const timerDurationSetting = document.getElementById('timerDurationSetting');
            isTimerEnabled = timerToggle.checked;
            localStorage.setItem('isTimerEnabled', isTimerEnabled);
            timerDurationSetting.classList.toggle('hidden', !isTimerEnabled);
            // If timer is disabled, ensure it stops and hides
            if (!isTimerEnabled) {
                stopTimer();
                document.getElementById('timerDisplay').style.display = 'none';
            } else {
                // If timer is enabled, reset it for the next quiz generation
                resetTimer();
            }
        }

        function saveSettings() {
            // Settings are already saved on change for toggles and radios.
            // For time limit, it's saved on change as well.
            closeCustomModal();
            // Re-initialize timer based on new settings
            initializeTimer();
            showCustomModal(
                'Settings Saved! ✨',
                'Your preferences have been updated!',
                `<button class="btn btn-primary" onclick="closeCustomModal()">Awesome!</button>`
            );
        }

        // --- Timer Logic ---
        function startTimer() {
            if (!isTimerEnabled) return;
            stopTimer(); // Clear any existing timer
            document.getElementById('timerDisplay').style.display = 'block';
            timerInterval = setInterval(() => {
                currentTime--;
                updateTimerDisplay();
                if (currentTime <= 0) {
                    stopTimer();
                    showCustomModal(
                        '⏰ Time\'s Up! ⏰',
                        'You\'ve run out of time for this quiz!',
                        `<button class="btn btn-primary" onclick="closeCustomModal(); submitQuiz();">See Results</button>`
                    );
                    // Optionally, automatically submit the quiz here
                    submitQuiz();
                }
            }, 1000);
        }

        function stopTimer() {
            clearInterval(timerInterval);
        }

        function resetTimer() {
            stopTimer();
            currentTime = timeLimit;
            updateTimerDisplay();
            document.getElementById('timerDisplay').style.display = 'none'; // Hide until quiz starts
        }

        function updateTimerDisplay() {
            const minutes = Math.floor(currentTime / 60);
            const seconds = currentTime % 60;
            document.getElementById('timeRemaining').textContent =
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function initializeTimer() {
            isTimerEnabled = localStorage.getItem('isTimerEnabled') === 'true';
            timeLimit = parseInt(localStorage.getItem('timeLimit') || 300);
            currentTime = timeLimit; // Ensure current time is reset when initializing
            updateTimerDisplay(); // Update display immediately
            if (isTimerEnabled && quizSubmitted === false && totalBlanks > 0) { // Only show if quiz is active and timer enabled
                 document.getElementById('timerDisplay').style.display = 'block';
            } else {
                 document.getElementById('timerDisplay').style.display = 'none';
            }
        }

        // --- Main Quiz Logic Functions ---

        function generateRevision() {
            const notesText = document.getElementById('notesTextarea').value.trim();

            if (!notesText) {
                showCustomModal(
                    'Oops!',
                    'Please type or paste some notes first to create your quiz! 📝',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Got It!</button>`
                );
                return;
            }

            blanksData = [];
            totalBlanks = 0;
            correctAnswers = 0;
            incorrectAnswers = 0;
            quizSubmitted = false;

            // Stop and reset timer before generating new quiz
            resetTimer();

            const difficulty = localStorage.getItem('quizDifficulty') || 'hard'; // Default to hard
            let charsToReveal = 0; // Default for 'hard' (no characters)
            if (difficulty === 'easy') {
                charsToReveal = 2;
            } else if (difficulty === 'medium') {
                charsToReveal = 1;
            }

            // Process the text to find words in brackets and replace them with interactive inputs
            let processedText = notesText.replace(/\[([^\]]+)\]/g, (match, word) => {
                const blankId = `blank_${totalBlanks}`;
                const revealedPart = word.substring(0, charsToReveal);
                const underscores = '_'.repeat(word.length - revealedPart.length);
                const placeholder = revealedPart + underscores;

                blanksData.push({
                    id: blankId,
                    answer: word.toLowerCase(),
                    placeholder: placeholder // Store the generated placeholder
                });

                totalBlanks++;

                return `<span class="blank-container inline-flex items-center gap-2 mx-1 vertical-align-baseline">
                    <input type="text" class="blank-input px-3 py-2 border-2 rounded-lg text-base font-medium transition-all duration-300 min-w-[100px] text-center focus:outline-none focus:ring-2"
                           id="${blankId}"
                           placeholder="${placeholder}"
                           autocomplete="off">
                    <div class="status-indicator w-7 h-7 rounded-full flex items-center justify-center font-extrabold text-sm transition-all duration-300"
                         id="${blankId}_status">?</div>
                </span>`;
            });

            // Hide the notes input section and show the quiz
            document.getElementById('notesInput').style.display = 'none';
            document.getElementById('revisionContent').innerHTML = processedText;
            document.getElementById('revisionContent').style.display = 'block';

            // Update button visibility
            document.getElementById('submitBtn').style.display = 'inline-flex';
            document.getElementById('revealBtn').style.display = 'none';
            document.getElementById('retestBtn').style.display = 'none';

            updateStats(); // Initialize stats

            // Start timer if enabled
            if (isTimerEnabled) {
                startTimer();
            }
        }

        function submitQuiz() {
            if (totalBlanks === 0) {
                showCustomModal(
                    'No Quiz Yet!',
                    'Please generate your revision quiz first! 🚀',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Okay!</button>`
                );
                return;
            }

            // Stop timer when quiz is submitted
            stopTimer();

            quizSubmitted = true;
            let correctCount = 0;
            let attemptedCount = 0;

            blanksData.forEach(blank => {
                const input = document.getElementById(blank.id);
                const statusIndicator = document.getElementById(blank.id + '_status');
                const userAnswer = input.value.toLowerCase().trim();

                input.disabled = true; // Disable input after submission

                if (userAnswer) {
                    attemptedCount++;
                    if (userAnswer === blank.answer) {
                        correctCount++;
                        input.classList.add('correct', '!border-green-500', '!bg-green-50', '!text-green-800');
                        statusIndicator.classList.add('correct', 'bg-green-500', 'text-white', 'transform', 'scale-110');
                        statusIndicator.textContent = '✓';
                    } else {
                        input.classList.add('incorrect', '!border-red-500', '!bg-red-50', '!text-red-800', 'animate-shake');
                        statusIndicator.classList.add('incorrect', 'bg-red-500', 'text-white');
                        statusIndicator.textContent = '✗';
                    }
                } else {
                    // Not attempted
                    input.classList.add('!border-gray-400', '!bg-gray-100', '!text-gray-600');
                    statusIndicator.classList.add('bg-gray-300', 'text-gray-700');
                    statusIndicator.textContent = '...';
                }
            });

            const score = totalBlanks > 0 ? Math.round((correctCount / totalBlanks) * 100) : 0;
            showScoreResults(correctCount, totalBlanks, score, attemptedCount);

            // Update button visibility
            document.getElementById('submitBtn').style.display = 'none';
            document.getElementById('revealBtn').style.display = 'inline-flex';
            document.getElementById('retestBtn').style.display = 'inline-flex';

            updateStats(); // Update stats based on submission results
        }

        function showScoreResults(correct, total, score, attempted) {
            let message = '';
            let emoji = '';

            if (score === 100 && total > 0) {
                message = 'You\'re a Quiz Whiz!';
                emoji = '🌟';
                showCelebration(); // Trigger special celebration for perfect score
            } else if (score >= 80) {
                message = 'Awesome Job!';
                emoji = '🎉';
            } else if (score >= 50) {
                message = 'Great Effort!';
                emoji = '👍';
            } else {
                message = 'Keep Practicing!';
                emoji = '💪';
            }

            // Added dark:text-gray-300 to the paragraph tags within the message
            showCustomModal(
                `${emoji} Quiz Submitted! ${emoji}`,
                `<h3>${message}</h3>
                <div class="my-4 text-xl">
                    <p class="dark:text-gray-300"><strong>Your Score: ${correct}/${total}</strong></p>
                    <p class="dark:text-gray-300"><strong>Percentage: ${score}%</strong></p>
                    <p class="dark:text-gray-300">Questions Attempted: ${attempted}/${total}</p>
                </div>
                <p class="dark:text-gray-300">Ready to see which answers were correct?</p>`,
                `<button class="btn btn-primary" onclick="closeCustomModal()">Continue Learning! 📚</button>`
            );
        }

        function revealAnswers() {
            if (totalBlanks === 0) {
                showCustomModal(
                    'No Quiz Yet!',
                    'Please generate your revision quiz first! 🚀',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Okay!</button>`
                );
                return;
            }

            if (!quizSubmitted) {
                showCustomModal(
                    'Hold On!',
                    'Please submit your quiz first to see your score and then reveal answers! 📝',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Got It!</button>`
                );
                return;
            }

            blanksData.forEach(blank => {
                const input = document.getElementById(blank.id);
                const statusIndicator = document.getElementById(blank.id + '_status');
                const userAnswer = input.value.toLowerCase().trim();

                input.disabled = true; // Keep disabled

                if (userAnswer === blank.answer) {
                    // Already correct, keep green
                    input.classList.remove('incorrect', 'animate-shake');
                    input.classList.add('correct', '!border-green-500', '!bg-green-50', '!text-green-800');
                    statusIndicator.classList.remove('incorrect');
                    statusIndicator.classList.add('correct', 'bg-green-500', 'text-white');
                    statusIndicator.textContent = '✓';
                } else {
                    // Incorrect or empty, show correct answer
                    input.value = blank.answer; // Overwrite with correct answer
                    input.classList.remove('correct', 'incorrect', 'animate-shake');
                    input.classList.add('show-answer', '!border-yellow-500', '!bg-yellow-50', '!text-yellow-800', '!font-bold');
                    statusIndicator.classList.remove('correct', 'incorrect', 'empty');
                    statusIndicator.classList.add('show-answer', 'bg-yellow-500', 'text-gray-800');
                    statusIndicator.textContent = 'A'; // 'A' for Answer
                }
            });

            updateStats(); // Update stats (though counts won't change after reveal)

            const correctCount = getCurrentCorrectCount(); // This will still count based on initial correct answers
            const score = totalBlanks > 0 ? Math.round((correctCount / totalBlanks) * 100) : 0;

            showCustomModal(
                '📋 Detailed Results!',
                `<div class="my-4 text-xl">
                    <p class="dark:text-gray-300"><strong>Final Score: ${correctCount}/${totalBlanks} (${score}%)</strong></p>
                    <br>
                    <div class="text-left text-base">
                        <p class="dark:text-gray-300"><span class="inline-block w-4 h-4 rounded-full bg-green-500 mr-2"></span> <strong>Green:</strong> Your correct answers</p>
                        <p class="dark:text-gray-300"><span class="inline-block w-4 h-4 rounded-full bg-red-500 mr-2"></span> <strong>Red:</strong> Your incorrect answers</p>
                        <p class="dark:text-gray-300"><span class="inline-block w-4 h-4 rounded-full bg-yellow-500 mr-2"></span> <strong>Yellow:</strong> Correct answers revealed</p>
                    </div>
                </div>
                <p class="dark:text-gray-300">Review the answers above and try again when ready!</p>`,
                `<button class="btn btn-primary" onclick="closeCustomModal()">Got It! 🎉</button>`
            );
        }

        function retestQuestions() {
            if (totalBlanks === 0) {
                showCustomModal(
                    'No Quiz Yet!',
                    'Please generate your revision quiz first! 🚀',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Okay!</button>`
                );
                return;
            }

            showCustomModal(
                'Ready for a New Round?',
                'Do you want to clear your answers and try these questions again? 🔄',
                `<button class="btn btn-primary" onclick="confirmRetest()">Yes, Let's Go!</button>
                 <button class="btn btn-tertiary" onclick="closeCustomModal()">Not Yet</button>`
            );
        }

        function confirmRetest() {
            closeCustomModal(); // Close the confirmation modal

            // Stop and reset timer before retesting
            resetTimer();

            // Clear all input fields and reset their states
            blanksData.forEach(blank => {
                const input = document.getElementById(blank.id);
                const statusIndicator = document.getElementById(blank.id + '_status');

                input.value = '';
                input.className = 'blank-input px-3 py-2 border-2 rounded-lg text-base font-medium transition-all duration-300 min-w-[100px] text-center focus:outline-none focus:ring-2';
                input.disabled = false; // Enable input
                statusIndicator.className = 'status-indicator w-7 h-7 rounded-full flex items-center justify-center font-extrabold text-sm transition-all duration-300';
                statusIndicator.textContent = '?';
            });

            // Reset quiz state
            correctAnswers = 0;
            incorrectAnswers = 0;
            quizSubmitted = false;

            // Reset button visibility - back to fresh quiz state
            document.getElementById('submitBtn').style.display = 'inline-flex';
            document.getElementById('revealBtn').style.display = 'none';
            document.getElementById('retestBtn').style.display = 'none';

            updateStats(); // Reset stats display

            showCustomModal(
                'Awesome!',
                'Ready for another attempt! You got this! 🎯',
                `<button class="btn btn-primary" onclick="closeCustomModal()">Let's Do It!</button>`
            );
        }

        function getCurrentCorrectCount() {
            let correct = 0;
            blanksData.forEach(blank => {
                const input = document.getElementById(blank.id);
                const userAnswer = input.value.toLowerCase().trim();
                // Only count as correct if it matches exactly and wasn't revealed (i.e., user entered it)
                if (userAnswer === blank.answer && !input.classList.contains('show-answer')) {
                    correct++;
                }
            });
            return correct;
        }

        function getCurrentIncorrectCount() {
            let incorrect = 0;
            blanksData.forEach(blank => {
                const input = document.getElementById(blank.id);
                const userAnswer = input.value.toLowerCase().trim();
                if (userAnswer && userAnswer !== blank.answer && !input.classList.contains('show-answer')) {
                    incorrect++;
                }
            });
            return incorrect;
        }

        function updateStats() {
            correctAnswers = getCurrentCorrectCount();
            incorrectAnswers = getCurrentIncorrectCount();

            const progress = totalBlanks > 0 ? Math.round((correctAnswers / totalBlanks) * 100) : 0;

            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressText').textContent = progress + '% Complete';
            document.getElementById('correctCount').textContent = correctAnswers + ' Correct';
            document.getElementById('incorrectCount').textContent = incorrectAnswers + ' Incorrect';
            document.getElementById('totalBlanks').textContent = totalBlanks + ' Total';
        }

        function resetRevision() {
            if (totalBlanks === 0 && !document.getElementById('notesTextarea').value.trim()) {
                showCustomModal(
                    'Nothing to Reset!',
                    'Your notes area is already empty. Start fresh! ✨',
                    `<button class="btn btn-primary" onclick="closeCustomModal()">Okay!</button>`
                );
                return;
            }

            showCustomModal(
                'Clear Everything?',
                'Are you sure you want to reset all content and answers? This will clear your notes too! 🗑️',
                `<button class="btn btn-secondary" onclick="confirmReset()">Yes, Clear All!</button>
                 <button class="btn btn-tertiary" onclick="closeCustomModal()">No, Keep It</button>`
            );
        }

        function confirmReset() {
            closeCustomModal(); // Close the confirmation modal

            // Clear the textarea and restore default notes
            document.getElementById('notesTextarea').value = defaultNotes;

            // Show the notes input section again
            document.getElementById('notesInput').style.display = 'block';

            // Hide the revision content
            document.getElementById('revisionContent').style.display = 'none';

            // Reset all variables
            blanksData = [];
            totalBlanks = 0;
            correctAnswers = 0;
            incorrectAnswers = 0;
            quizSubmitted = false;

            // Stop and reset timer
            resetTimer();

            // Reset button visibility
            document.getElementById('submitBtn').style.display = 'none';
            document.getElementById('revealBtn').style.display = 'none';
            document.getElementById('retestBtn').style.display = 'none';

            updateStats(); // Reset stats display

            showCustomModal(
                'All Cleared!',
                'Everything is reset. Ready for a new adventure! 🌟',
                `<button class="btn btn-primary" onclick="closeCustomModal()">Let's Go!</button>`
            );
        }

        // Special celebration for perfect score
        function showCelebration() {
            const overlay = document.createElement('div');
            overlay.className = 'fixed inset-0 bg-black bg-opacity-60 z-[999] flex items-center justify-center';

            const celebration = document.createElement('div');
            celebration.className = 'bg-gradient-to-br from-lime-400 to-green-500 text-white p-8 rounded-3xl shadow-2xl text-center z-[1000] animate-popIn max-w-sm w-11/12';
            celebration.innerHTML = `
                <h2 class="text-4xl font-extrabold mb-4">🎉 Perfect Score! 🎉</h2>
                <p class="text-xl mb-6">Outstanding! You got everything correct!</p>
                <p class="text-2xl font-bold mb-8"><strong>Perfect Score: ${totalBlanks}/${totalBlanks}</strong></p>
                <br>
                <button class="btn btn-primary" onclick="closeCelebration()">Amazing Work! 🌟</button>
            `;

            document.body.appendChild(overlay);
            document.body.appendChild(celebration);

            // Auto-close after 5 seconds
            setTimeout(() => {
                closeCelebration();
            }, 5000);
        }

        function closeCelebration() {
            const overlay = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-60.z-\\[999\\]');
            const celebration = document.querySelector('.bg-gradient-to-br.from-lime-400.to-green-500.text-white');
            if (overlay) overlay.remove();
            if (celebration) celebration.remove();
        }

        // --- Initialize on Load ---
        document.addEventListener('DOMContentLoaded', () => {
            // Load Dark Mode preference
            if (localStorage.getItem('darkMode') === 'true') {
                document.body.classList.add('dark-mode');
            }

            // Initialize timer settings from localStorage
            initializeTimer();

            // Sample notes for demonstration (pre-filled for easy testing)
            document.getElementById('notesTextarea').value = defaultNotes;
        });
    </script>
</body>
</html>
